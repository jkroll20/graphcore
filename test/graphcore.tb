# script to be used with talkback.py for testing graphcore

# build small graph #################################################
> add-arcs:
> 1,11
> 1,12
> 1,13
> 2,21
> 21,12
> 13,21
> 21,211
> 
>
= OK.

# check stats
> stats
~ ^OK\..*:$
*
= ArcCount,7
*
=

# check successors #################################################
> list-successors 1
~ ^OK\..*:$
= 11
= 12
= 13
= 

> traverse-successors 1 1
~ ^OK\..*:$
= 1
= 11
= 12
= 13
= 

> traverse-successors 1 2
~ ^OK\..*:$
= 1
= 11
= 12
= 13
= 21
= 

> traverse-successors 1 3
~ ^OK\..*:$
= 1
= 11
= 12
= 13
= 21
= 211
= 

# check predecessors #################################################
> traverse-predecessors 1 5
~ ^OK\..*:$
= 1
=

> list-predecessors 1
~ ^OK\..*:$
= 

> traverse-predecessors 211 0
~ ^OK\..*:$
= 211
= 

> traverse-predecessors 666 1
~ ^NONE\.

> traverse-predecessors 1 0
~ ^OK\..*:$
= 1
= 

> traverse-predecessors 211 1
~ ^OK\..*:$
= 211
= 21
= 

> traverse-predecessors 211 2
~ ^OK\..*:$
= 211
= 21
= 2
= 13
=

# test pathes #################################################
> find-path 211 2
~ ^NONE\.

> find-path 1 2
~ ^NONE\.

> find-path 11 11
~ ^OK\..*:$
= 

> find-path 1 211
~ ^OK\..*:$
= 1,13
= 13,21
= 21,211
= 

> find-path 2 211
~ ^OK\..*:$
= 2,21
= 21,211
=

# test find-root #################################################
> find-root 1
~ ^OK\..*:$
= 

> find-root 11
~ ^OK\..*:$
= 1,11
= 

> find-root 211
~ ^OK\..*:$
= 2,21
= 21,211
= 

# test list-roots #################################################
> list-roots
~ ^OK\..*:$
= 1
= 2
= 

# (fixed)
> list-leaves
~ ^OK\..*:$
= 11
= 12
= 211
= 

# test set operations #################################################
> list-roots && traverse-predecessors 211 5
~ ^OK\..*:$
= 1
= 2
= 

> list-roots && traverse-predecessors 13 5
~ ^OK\..*:$
= 1
= 

> traverse-successors 21 5 && traverse-successors 2 5
~ ^OK\..*:$
= 12
= 21
= 211
= 

> traverse-successors 1 5 &&! traverse-successors 2 5
~ ^OK\..*:$
= 1
= 11
= 13
= 

#(fixed)
# returns NONE, should return empty set
> traverse-successors 13 5 &&! traverse-successors 1 5
~ ^OK\..*:$
= 

#(fixed)
> traverse-successors 21 5 &&! list-leaves
~ ^OK\..*:$
= 21
=

# test operations with NONE ###########################################
# (fixed)
# returns NONE, should return empty set
> list-roots && list-leaves
~ ^OK\..*:$
= 

# (fixed)
# && should return NONE *only* of one of the operants return NONE.
# &&! should return NONE if the left operant is NONE. NONE on the right side is treated like an empty set.
# (this crap needs to be documented somewhere..)

# J: list-*-nonrecursive never returns NONE, so these tests don't work as expected:
; > list-roots && list-successors 666
; ~ ^NONE\..*$
; 
; > list-successors 666 && list-roots
; ~ ^NONE\..*$

# J: these work:
> list-roots && traverse-successors 666 1
~ ^NONE\..*$

> traverse-successors 666 1 && list-roots
~ ^NONE\..*$

> list-roots &&! list-predecessors 666
~ ^OK\..*:$
= 1
= 2
=

> traverse-successors 666 1 &&! list-roots
~ ^NONE\..*$

; > list-roots &&! list-predecessors 666

# insert dupes #################################################
> add-arcs:
> 1,11
> 2,21
> 
~ ^OK\.(.*[^:])?$

> stats
~ ^OK\..*:$
*
= ArcCount,7
*
=

> list-successors 1
~ ^OK\..*:$
= 11
= 12
= 13
=

# test remove arcs #################################################
> remove-arcs:
> 666,777
> 21,12
>
~ ^OK\.(.*[^:])?$

> stats
~ ^OK\..*:$
*
= ArcCount,6
*
=

> list-successors 21
~ ^OK\..*:$
= 211
=

# test bad data #################################################
> add-arcs:
> 1,2,3
>
~ ^ERROR!.*$

#(fixed)
# gets read as an empty line, should cause ERROR
> add-arcs:
> ,
>
~ ^ERROR!.*$

> add-arcs:
> 1,
>
~ ^ERROR!.*$

> add-arcs:
> ,1
>
~ ^ERROR!.*$

> add-arcs:
> -1,-2
>
~ ^ERROR!.*$

> add-arcs:
> a,b
>
~ ^ERROR!.*$

> add-arcs:
> 1,0
>
~ ^ERROR!.*$

# (fixed)
# slurp dataset before erroring out!
> add-arcs:
> 1,11
> a,b
> 1,12
>
~ ^ERROR!.*$
 
#check if remaining lines got slurped:
> stats
~ ^OK\..*:$
*
=


# test clear #################################################
> clear 
~ ^OK\.(.*[^:])?$

> stats
~ ^OK\..*:$
*
= ArcCount,0
*
=

> list-roots
~ ^OK\..*:$
= 

# test circles #################################################
> add-arcs:
> 1,2
> 2,3
> 3,1
> 4,4
> 4,1
> 
~ ^OK\.(.*[^:])?$

> list-roots
~ ^OK\..*:$
= 

> find-root 2
~ ^NONE\.(.*[^:])?$

> find-root 4
~ ^NONE\.(.*[^:])?$

> find-path 2 1
~ ^OK\..*:$
= 2,3
= 3,1
=

> find-path 2 4
~ ^NONE\.(.*[^:])?$

> traverse-successors 3 1
~ ^OK\..*:$
= 3
= 1
=

> traverse-successors 2 6
~ ^OK\..*:$
= 2
= 3
= 1
= 

> traverse-successors 4 6
~ ^OK\..*:$
= 4
= 1
= 2
= 3
= 

> traverse-predecessors 4 6
~ ^OK\..*:$
= 4
= 

# test replace #################################################
> replace-successors 4:
> 
~ ^OK\.(.*[^:])?$

> list-by-head 0
*
=

> list-by-tail 0
*
=

> traverse-successors 4 2
~ ^NONE\.(.*[^:])?$

> list-predecessors 1 
~ ^OK\..*:$
= 3
= 

> replace-predecessors 4:
> 2
> 3
> 
~ ^OK\.(.*[^:])?$

> traverse-predecessors 4 1
~ ^OK\..*:$
= 4
= 2
= 3
=

> traverse-successors 2 1
~ ^OK\..*:$
= 2
= 3
= 4
= 

# invalid commands #################################################
> bla bla
~ ^FAILED!(.*[^:])?$

> list-successors
~ ^FAILED!(.*[^:])?$

> traverse-successors 1
~ ^FAILED!(.*[^:])?$

> traverse-successors 1 1 1
~ ^FAILED!(.*[^:])?$

> traverse-successors -1 -1
~ ^FAILED!(.*[^:])?$

> traverse-successors 1.2 2.3
~ ^FAILED!(.*[^:])?$

> traverse-successors x y
~ ^FAILED!(.*[^:])?$

# (fixed)
# slurp dataset before erroring out!
> foo:
> 1,11
> 1,12
>
~ ^FAILED!.*$
 
#check if remaining lines got slurped:
> stats
~ ^OK\..*:$
*
=


# quit #################################################
> shutdown
~ ^OK\.(.*[^:])?$

# close output
.

# check return code
? 0
